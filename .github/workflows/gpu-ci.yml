name: GPU CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  gpu-ci:
    runs-on: linux-amd64-gpu-p100-latest-1
    container:
      image: nvcr.io/nvidia/pytorch:23.09-py3
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
      options: --shm-size=1G
      credentials:
        username: $oauthtoken
        password: ${{ secrets.NGC_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          python -m pip install "torch${{ matrix.torch-version }}"
          python -m pip install .[pytorch-dev]
      - name: Run tests
        run: |
          pytest -m singlegpu tests/

  #multi-gpu-ci:
  #  runs-on: linux-amd64-gpu-p100-latest-2
  #  container:
  #    image: nvcr.io/nvidia/pytorch:23.09-py3
  #    env:
  #      NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
  #    options: --shm-size=1G
  #    credentials:
  #      username: $oauthtoken
  #      password: ${{ secrets.NGC_TOKEN }}
  #
  #  steps:
  #    - uses: actions/checkout@v3
  #      with:
  #        fetch-depth: 0
  #    - name: Install dependencies
  #      run: |
  #        python -m pip install "torch${{ matrix.torch-version }}"
  #        python -m pip install .[pytorch-dev]
  #    - name: Run tests
  #      run: |
  #        pytest -m multigpu tests/

  benchmark:
    runs-on: linux-amd64-gpu-p100-latest-1
    container:
      image: nvcr.io/nvidia/pytorch:23.09-py3
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
      options: --shm-size=1G
      credentials:
        username: $oauthtoken
        password: ${{ secrets.NGC_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 50 # this is to make sure we obtain the target base commit

      - name: Install dependencies
        run: |
          python -m pip install .[pytorch-dev]

      - name: Setup Environment
        shell: bash
        run: |
          git config --global --add safe.directory /__w/crossfit/crossfit

          echo "BASE_SHA=$(git ls-remote -q | grep refs/heads/main$ | awk '{print $1}' | xargs git rev-parse --short)" >> ${GITHUB_ENV}
          echo "PR_COMMENT=$(mktemp)" >>  ${GITHUB_ENV}

      - name: Setup Environment (PR)
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
          echo "HEAD_SHA=$(echo ${{ github.event.pull_request.head.sha }} | cut cut -c1-8)" >> ${GITHUB_ENV}

      - name: Setup Environment (Push)
        if: ${{ github.event_name == 'push' }}
        shell: bash
        run: |
          echo "HEAD_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> ${GITHUB_ENV}

      - name: Run benchmarks
        shell: bash
        run: |
          RUN_BENCHMARK="py.test -m benchmark tests/"

          git checkout ${{ env.HEAD_SHA }}
          $RUN_BENCHMARK --benchmark-save=branch

          #git checkout ${{ env.BASE_SHA }}
          #$RUN_BENCHMARK --benchmark-save=main
          git checkout 72d548e
          $RUN_BENCHMARK --benchmark-save=main

      - name: Compare results
        run: |
          
          py.test-benchmark compare > cmp_results

          echo 'Benchmark comparison for [`${{ env.BASE_SHA }}`](${{ github.event.repository.html_url }}/commit/${{ env.BASE_SHA }}) (main) vs [`${{ env.HEAD_SHA }}`](${{ github.event.repository.html_url }}/commit/${{ env.HEAD_SHA }}) (PR)' >> pr_comment
          echo 'Benchmark comparison for [main] vs PR (${{ github.event.repository.html_url }}/commit/${{ env.HEAD_SHA }})' >> pr_comment
          echo '```' >> pr_comment
          cat cmp_results >> pr_comment
          echo '```' >> pr_comment
          cat pr_comment > ${{ env.PR_COMMENT }}

      - name: 'Comment PR'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get pull requests that are open for current ref.
            const pullRequests = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              // state: 'all',
              // head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            })

            console.log(pullRequests.data[0])
            console.log(pullRequests.data[0].head)
            console.log(`${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`)

            // github.rest.issues.createComment({
            //   issue_number: pullRequests.data[0].number,
            //   owner: context.repo.owner,
            //   repo: context.repo.repo,
            //   body: require('fs').readFileSync('${{ env.PR_COMMENT }}').toString()
            // })
