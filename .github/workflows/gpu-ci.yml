name: GPU CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  gpu-ci:
    runs-on: linux-amd64-gpu-p100-latest-1
    container:
      image: nvcr.io/nvidia/pytorch:23.09-py3
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
      options: --shm-size=1G
      credentials:
        username: $oauthtoken
        password: ${{ secrets.NGC_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          python -m pip install "torch${{ matrix.torch-version }}"
          python -m pip install .[pytorch-dev]
      - name: Run tests
        run: |
          pytest -m singlegpu tests/

  #multi-gpu-ci:
  #  runs-on: linux-amd64-gpu-p100-latest-2
  #  container:
  #    image: nvcr.io/nvidia/pytorch:23.09-py3
  #    env:
  #      NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
  #    options: --shm-size=1G
  #    credentials:
  #      username: $oauthtoken
  #      password: ${{ secrets.NGC_TOKEN }}
  #
  #  steps:
  #    - uses: actions/checkout@v3
  #      with:
  #        fetch-depth: 0
  #    - name: Install dependencies
  #      run: |
  #        python -m pip install "torch${{ matrix.torch-version }}"
  #        python -m pip install .[pytorch-dev]
  #    - name: Run tests
  #      run: |
  #        pytest -m multigpu tests/

  benchmark:
    runs-on: linux-amd64-gpu-p100-latest-1
    container:
      image: nvcr.io/nvidia/pytorch:23.09-py3
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
      options: --shm-size=1G
      credentials:
        username: $oauthtoken
        password: ${{ secrets.NGC_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 50 # this is to make sure we obtain the target base commit

      - name: Install dependencies
        run: |
          python -m pip install .[pytorch-dev]

      - name: Setup benchmarks
        run: |
          echo "BASE_SHA=$(echo ${{ github.event.pull_request.base.sha }} | cut -c1-8)" >> $GITHUB_ENV
          echo "HEAD_SHA=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)" >> $GITHUB_ENV

          echo "PR_COMMENT=$(mktemp)" >>  $GITHUB_ENV

      - name: Run benchmarks
        run: |
          RUN_BENCHMARK="py.test -m benchmark tests/"

          git checkout ${{ github.event.pull_request.base.sha }}
          $RUN_BENCHMARK --benchmark-save=base

          git checkout ${{ github.event.pull_request.head.sha }}
          $RUN_BENCHMARK --benchmark-save=pr

      - name: Compare results
        run: |
          
          py.test-benchmark compare > cmp_results

          echo 'Benchmark comparison for [`${{ env.BASE_SHA }}`](${{ github.event.repository.html_url }}/commit/${{ github.event.pull_request.base.sha }}) (base) vs [`${{ env.HEAD_SHA }}`](${{ github.event.repository.html_url }}/commit/${{ github.event.pull_request.head.sha }}) (PR)' >> pr_comment
          echo '```' >> pr_comment
          cat cmp_results >> pr_comment
          echo '```' >> pr_comment
          cat pr_comment > ${{ env.PR_COMMENT }}

      - name: 'Comment PR'
        uses: actions/github-script@v6.4.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: require('fs').readFileSync('${{ env.PR_COMMENT }}').toString()
